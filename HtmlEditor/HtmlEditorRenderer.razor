@using DevExpress.Blazor
@using DevExpress.Blazor.Office
@using DevExpress.Blazor.Office.Internal

<DxHtmlEditor @ref="htmlEditorComponent"
              Markup="@ComponentModel.Markup"
              MarkupChanged="@ComponentModel.MarkupChanged"
              Attributes="@ComponentModel.Attributes.ToDictionary()"
              BindMarkupMode="HtmlEditorBindMarkupMode.OnDelayedInput"
              ReadOnly="@ComponentModel.ReadOnly"
              CssClass="@ComponentModel.CssClass"
              CustomizeToolbar="@OnCustomizeToolbar"
              NullText="@ComponentModel.NullText" />

@code {
    private DxHtmlEditor htmlEditorComponent;

    [Parameter]
    public HtmlEditorModel ComponentModel { get; set; }

    public static RenderFragment Create(HtmlEditorModel componentModel) => @<HtmlEditorRenderer ComponentModel=@componentModel />;

    private void OnCustomizeToolbar(IToolbar toolbar)
    {
        var fonts = toolbar.Groups[HtmlEditorToolbarGroupNames.Font] as BarGroupInfo;
        var fontNames = fonts?.Items["FontName"] as ComboBoxInfo;
        fontNames?.Items.Clear();
        fontNames?.Items.Add("Calibri", "Calibri");
        fontNames?.Items.Add("Homa", "B Homa");
        fontNames?.Items.Add("Nazanin", "B Nazanin");
        fontNames?.Items.Add("Tahoma", "Tahoma");
        fontNames?.Items.Add("Traffic", "B Traffic");
        fontNames?.Items.Add("Wingdings", "Wingdings");
        fontNames?.Items.Add("Zar", "B Zar");

        toolbar.Groups[HtmlEditorToolbarGroupNames.Paragraph].Items.Remove("ParagraphStyles");
    }
}
